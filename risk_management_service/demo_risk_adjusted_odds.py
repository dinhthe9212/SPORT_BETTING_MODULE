#!/usr/bin/env python3
"""
Demo script cho Risk-Adjusted Offered Odds API
Ch·∫°y c√°c test case ƒë·ªÉ ki·ªÉm tra API ho·∫°t ƒë·ªông
"""

import requests
import json
from decimal import Decimal

# C·∫•u h√¨nh API
BASE_URL = "http://localhost:8000/api/v1/risk"
API_ENDPOINTS = {
    'calculate': f"{BASE_URL}/risk-adjusted-odds/",
    'explain': f"{BASE_URL}/risk-adjusted-odds/",
    'batch': f"{BASE_URL}/risk-adjusted-odds/batch/",
    'test': f"{BASE_URL}/risk-adjusted-odds/test/"
}


def test_single_calculation():
    """Test t√≠nh to√°n ƒë∆°n l·∫ª"""
    print("=" * 60)
    print("TEST 1: T√çNH TO√ÅN ƒê∆†N L·∫∫")
    print("=" * 60)
    
    # Test case: T√¨nh hu·ªëng r·ªßi ro cao
    test_data = {
        "theoretical_odds": "2.00",
        "margin_factor": "1.05",
        "net_liability": "8000.00",
        "risk_threshold": "10000.00"
    }
    
    try:
        response = requests.post(API_ENDPOINTS['calculate'], json=test_data)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Th√†nh c√¥ng!")
            print(f"üìä K·∫øt qu·∫£:")
            print(f"  Odds ch√†o b√°n: {result.get('risk_adjusted_odds', 'N/A')}")
            print(f"  Tr·∫°ng th√°i r·ªßi ro: {result.get('risk_status', 'N/A')}")
            print(f"  Th·ªã tr∆∞·ªùng b·ªã kh√≥a: {result.get('market_locked', 'N/A')}")
            print(f"  Khuy·∫øn ngh·ªã: {result.get('recommendations', [])}")
        else:
            print(f"‚ùå L·ªói: {response.status_code}")
            print(f"Chi ti·∫øt: {response.text}")
            
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}")


def test_detailed_explanation():
    """Test l·∫•y gi·∫£i th√≠ch chi ti·∫øt"""
    print("\n" + "=" * 60)
    print("TEST 2: GI·∫¢I TH√çCH CHI TI·∫æT")
    print("=" * 60)
    
    params = {
        "theoretical_odds": "2.50",
        "margin_factor": "1.08",
        "net_liability": "3000.00",
        "risk_threshold": "10000.00"
    }
    
    try:
        response = requests.get(API_ENDPOINTS['explain'], params=params)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Th√†nh c√¥ng!")
            print(f"üìã C√¥ng th·ª©c: {result.get('formula', 'N/A')}")
            
            steps = result.get('steps', {})
            for step_key, step_data in steps.items():
                print(f"\n{step_key.upper()}:")
                print(f"  M√¥ t·∫£: {step_data.get('description', 'N/A')}")
                print(f"  T√≠nh to√°n: {step_data.get('calculation', 'N/A')}")
                print(f"  K·∫øt qu·∫£: {step_data.get('result', 'N/A')}")
                print(f"  Gi·∫£i th√≠ch: {step_data.get('explanation', 'N/A')}")
        else:
            print(f"‚ùå L·ªói: {response.status_code}")
            print(f"Chi ti·∫øt: {response.text}")
            
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}")


def test_batch_calculation():
    """Test t√≠nh to√°n batch"""
    print("\n" + "=" * 60)
    print("TEST 3: T√çNH TO√ÅN BATCH")
    print("=" * 60)
    
    batch_data = {
        "odds_configs": [
            {
                "id": "match_1_home",
                "theoretical_odds": "2.00",
                "margin_factor": "1.05",
                "net_liability": "-500.00",
                "risk_threshold": "10000.00"
            },
            {
                "id": "match_1_away",
                "theoretical_odds": "3.50",
                "margin_factor": "1.05",
                "net_liability": "2000.00",
                "risk_threshold": "10000.00"
            },
            {
                "id": "match_1_draw",
                "theoretical_odds": "3.20",
                "margin_factor": "1.05",
                "net_liability": "1500.00",
                "risk_threshold": "10000.00"
            },
            {
                "id": "match_2_home",
                "theoretical_odds": "1.80",
                "margin_factor": "1.10",
                "net_liability": "8000.00",
                "risk_threshold": "10000.00"
            }
        ]
    }
    
    try:
        response = requests.post(API_ENDPOINTS['batch'], json=batch_data)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Th√†nh c√¥ng!")
            print(f"üìä T·ªïng k·∫øt:")
            print(f"  T·ªïng c·∫•u h√¨nh: {result.get('total_configs', 'N/A')}")
            print(f"  Th√†nh c√¥ng: {result.get('successful_configs', 'N/A')}")
            print(f"  Th·∫•t b·∫°i: {result.get('failed_configs', 'N/A')}")
            print(f"  Th·ªã tr∆∞·ªùng b·ªã kh√≥a: {result.get('locked_markets', 'N/A')}")
            
            summary = result.get('summary', {})
            print(f"  T·ª∑ l·ªá th√†nh c√¥ng: {summary.get('success_rate', 0):.2f}%")
            print(f"  T·ª∑ l·ªá kh√≥a: {summary.get('lock_rate', 0):.2f}%")
            
            print(f"\nüìã Chi ti·∫øt t·ª´ng c·∫•u h√¨nh:")
            results = result.get('results', {})
            for config_id, config_result in results.items():
                print(f"\n  {config_id}:")
                if config_result.get('success'):
                    print(f"    Odds ch√†o b√°n: {config_result['risk_adjusted_odds']:.4f}")
                    print(f"    Tr·∫°ng th√°i: {config_result['risk_status']}")
                    print(f"    B·ªã kh√≥a: {config_result['market_locked']}")
                else:
                    print(f"    L·ªói: {config_result.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå L·ªói: {response.status_code}")
            print(f"Chi ti·∫øt: {response.text}")
            
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}")


def test_predefined_cases():
    """Test c√°c tr∆∞·ªùng h·ª£p ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn"""
    print("\n" + "=" * 60)
    print("TEST 4: C√ÅC TR∆Ø·ªúNG H·ª¢P ƒê·ªäNH NGHƒ®A S·∫¥N")
    print("=" * 60)
    
    try:
        response = requests.get(API_ENDPOINTS['test'])
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Th√†nh c√¥ng!")
            
            summary = result.get('summary', {})
            print(f"üìä T·ªïng k·∫øt:")
            print(f"  T·ªïng test cases: {summary.get('total_cases', 'N/A')}")
            print(f"  Th√†nh c√¥ng: {summary.get('successful_cases', 'N/A')}")
            print(f"  Th·ªã tr∆∞·ªùng b·ªã kh√≥a: {summary.get('locked_markets', 'N/A')}")
            
            print(f"\nüìã Chi ti·∫øt t·ª´ng test case:")
            test_cases = result.get('test_cases', {})
            for case_id, case_data in test_cases.items():
                print(f"\n  {case_id}: {case_data.get('name', 'N/A')}")
                case_result = case_data.get('result', {})
                if case_result.get('success'):
                    print(f"    Odds ch√†o b√°n: {case_result.get('risk_adjusted_odds', 'N/A')}")
                    print(f"    Tr·∫°ng th√°i: {case_result.get('risk_status', 'N/A')}")
                    print(f"    B·ªã kh√≥a: {case_result.get('market_locked', 'N/A')}")
                else:
                    print(f"    L·ªói: {case_result.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå L·ªói: {response.status_code}")
            print(f"Chi ti·∫øt: {response.text}")
            
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}")


def test_formula_verification():
    """Test x√°c minh c√¥ng th·ª©c b·∫±ng t√≠nh to√°n th·ªß c√¥ng"""
    print("\n" + "=" * 60)
    print("TEST 5: X√ÅC MINH C√îNG TH·ª®C")
    print("=" * 60)
    
    # Tham s·ªë test
    theoretical_odds = Decimal('2.00')
    margin_factor = Decimal('1.05')
    net_liability = Decimal('2000.00')
    risk_threshold = Decimal('10000.00')
    
    print(f"üìä Tham s·ªë ƒë·∫ßu v√†o:")
    print(f"  Odds l√Ω thuy·∫øt: {theoretical_odds}")
    print(f"  Bi√™n l·ª£i nhu·∫≠n (M): {margin_factor}")
    print(f"  Tr√°ch nhi·ªám r√≤ng (L_r√≤ng): {net_liability}")
    print(f"  Tr·∫ßn r·ªßi ro (T_c·ªë_ƒë·ªãnh): {risk_threshold}")
    
    # T√≠nh to√°n th·ªß c√¥ng
    print(f"\nüî¢ T√≠nh to√°n th·ªß c√¥ng:")
    step1 = theoretical_odds / margin_factor
    print(f"  B∆∞·ªõc 1: {theoretical_odds} / {margin_factor} = {step1}")
    
    step2 = net_liability / risk_threshold
    print(f"  B∆∞·ªõc 2: {net_liability} / {risk_threshold} = {step2}")
    
    step3 = Decimal('1.0') - step2
    print(f"  B∆∞·ªõc 3: 1 - {step2} = {step3}")
    
    final_odds = step1 * step3
    print(f"  B∆∞·ªõc 4: {step1} * {step3} = {final_odds}")
    
    # So s√°nh v·ªõi API
    test_data = {
        "theoretical_odds": str(theoretical_odds),
        "margin_factor": str(margin_factor),
        "net_liability": str(net_liability),
        "risk_threshold": str(risk_threshold)
    }
    
    try:
        response = requests.post(API_ENDPOINTS['calculate'], json=test_data)
        
        if response.status_code == 200:
            result = response.json()
            api_odds = result.get('risk_adjusted_odds')
            
            print(f"\n‚úÖ K·∫øt qu·∫£ t·ª´ API: {api_odds}")
            print(f"‚úÖ K·∫øt qu·∫£ t√≠nh th·ªß c√¥ng: {final_odds}")
            
            if api_odds and abs(float(api_odds) - float(final_odds)) < 0.0001:
                print("‚úÖ C√¥ng th·ª©c ƒë∆∞·ª£c x√°c minh ch√≠nh x√°c!")
            else:
                print("‚ùå C√≥ s·ª± kh√°c bi·ªát trong k·∫øt qu·∫£!")
        else:
            print(f"‚ùå L·ªói API: {response.status_code}")
            print(f"Chi ti·∫øt: {response.text}")
            
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}")


def main():
    """Ch·∫°y t·∫•t c·∫£ c√°c test"""
    print("üß™ B·∫ÆT ƒê·∫¶U DEMO RISK-ADJUSTED OFFERED ODDS API")
    print("=" * 80)
    print(f"üåê Base URL: {BASE_URL}")
    print("=" * 80)
    
    try:
        test_single_calculation()
        test_detailed_explanation()
        test_batch_calculation()
        test_predefined_cases()
        test_formula_verification()
        
        print("\n" + "=" * 80)
        print("‚úÖ T·∫§T C·∫¢ DEMO ƒê√É HO√ÄN TH√ÄNH!")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå L·ªñI TRONG QU√Å TR√åNH DEMO: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
