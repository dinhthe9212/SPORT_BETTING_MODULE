#!/usr/bin/env python3
"""
Test script cho Risk-Adjusted Offered Odds Service
Ki·ªÉm tra tri·ªÉn khai c√¥ng th·ª©c: Odds_ch√†o_b√°n = (Odds_l√Ω_thuy·∫øt / M) * (1 - (L_r√≤ng / T_c·ªë_ƒë·ªãnh))
"""

import sys
import os
from decimal import Decimal

# Th√™m path ƒë·ªÉ import modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from risk_manager.services import RiskAdjustedOddsService


def test_basic_calculation():
    """Test t√≠nh to√°n c∆° b·∫£n"""
    print("=" * 60)
    print("TEST 1: T√çNH TO√ÅN C∆† B·∫¢N")
    print("=" * 60)
    
    service = RiskAdjustedOddsService()
    
    # Test case 1: T√¨nh hu·ªëng an to√†n (L_r√≤ng < 0)
    print("\nüìä Test Case 1: T√¨nh hu·ªëng AN TO√ÄN (L_r√≤ng < 0)")
    result1 = service.calculate_risk_adjusted_odds(
        theoretical_odds=Decimal('2.00'),
        margin_factor=Decimal('1.05'),
        net_liability=Decimal('-1000.00'),  # C√≥ l·ª£i nhu·∫≠n
        risk_threshold=Decimal('10000.00')
    )
    
    print(f"K·∫øt qu·∫£: {result1}")
    print(f"Odds ch√†o b√°n: {result1.get('risk_adjusted_odds', 'N/A')}")
    print(f"Tr·∫°ng th√°i r·ªßi ro: {result1.get('risk_status', 'N/A')}")
    print(f"Th·ªã tr∆∞·ªùng b·ªã kh√≥a: {result1.get('market_locked', 'N/A')}")
    
    # Test case 2: T√¨nh hu·ªëng r·ªßi ro cao (L_r√≤ng > 0)
    print("\nüìä Test Case 2: T√¨nh hu·ªëng R·ª¶I RO CAO (L_r√≤ng > 0)")
    result2 = service.calculate_risk_adjusted_odds(
        theoretical_odds=Decimal('2.00'),
        margin_factor=Decimal('1.05'),
        net_liability=Decimal('8000.00'),  # R·ªßi ro cao
        risk_threshold=Decimal('10000.00')
    )
    
    print(f"K·∫øt qu·∫£: {result2}")
    print(f"Odds ch√†o b√°n: {result2.get('risk_adjusted_odds', 'N/A')}")
    print(f"Tr·∫°ng th√°i r·ªßi ro: {result2.get('risk_status', 'N/A')}")
    print(f"Th·ªã tr∆∞·ªùng b·ªã kh√≥a: {result2.get('market_locked', 'N/A')}")
    
    # Test case 3: T√¨nh hu·ªëng th·ªã tr∆∞·ªùng b·ªã kh√≥a (odds ‚â§ 1.0)
    print("\nüìä Test Case 3: T√¨nh hu·ªëng TH·ªä TR∆Ø·ªúNG B·ªä KH√ìA")
    result3 = service.calculate_risk_adjusted_odds(
        theoretical_odds=Decimal('1.50'),
        margin_factor=Decimal('1.10'),
        net_liability=Decimal('9500.00'),  # R·ªßi ro r·∫•t cao
        risk_threshold=Decimal('10000.00')
    )
    
    print(f"K·∫øt qu·∫£: {result3}")
    print(f"Odds ch√†o b√°n: {result3.get('risk_adjusted_odds', 'N/A')}")
    print(f"Tr·∫°ng th√°i r·ªßi ro: {result3.get('risk_status', 'N/A')}")
    print(f"Th·ªã tr∆∞·ªùng b·ªã kh√≥a: {result3.get('market_locked', 'N/A')}")


def test_detailed_explanation():
    """Test gi·∫£i th√≠ch chi ti·∫øt"""
    print("\n" + "=" * 60)
    print("TEST 2: GI·∫¢I TH√çCH CHI TI·∫æT")
    print("=" * 60)
    
    service = RiskAdjustedOddsService()
    
    # Test v·ªõi t√¨nh hu·ªëng r·ªßi ro trung b√¨nh
    explanation = service.get_risk_adjustment_explanation(
        theoretical_odds=Decimal('2.50'),
        margin_factor=Decimal('1.08'),
        net_liability=Decimal('3000.00'),
        risk_threshold=Decimal('10000.00')
    )
    
    print(f"\nüìã C√¥ng th·ª©c: {explanation['formula']}")
    print(f"\nüî¢ C√°c b∆∞·ªõc t√≠nh to√°n:")
    
    for step_key, step_data in explanation['steps'].items():
        print(f"\n{step_key.upper()}:")
        print(f"  M√¥ t·∫£: {step_data['description']}")
        print(f"  T√≠nh to√°n: {step_data['calculation']}")
        print(f"  K·∫øt qu·∫£: {step_data['result']}")
        print(f"  Gi·∫£i th√≠ch: {step_data['explanation']}")
    
    print(f"\nüìä Ph√¢n t√≠ch r·ªßi ro:")
    risk_analysis = explanation['risk_analysis']
    for key, value in risk_analysis.items():
        print(f"  {key}: {value}")


def test_batch_calculation():
    """Test t√≠nh to√°n batch"""
    print("\n" + "=" * 60)
    print("TEST 3: T√çNH TO√ÅN BATCH")
    print("=" * 60)
    
    service = RiskAdjustedOddsService()
    
    # T·∫°o nhi·ªÅu c·∫•u h√¨nh test
    odds_configs = [
        {
            'id': 'match_1_home',
            'theoretical_odds': '2.00',
            'margin_factor': '1.05',
            'net_liability': '-500.00',
            'risk_threshold': '10000.00'
        },
        {
            'id': 'match_1_away',
            'theoretical_odds': '3.50',
            'margin_factor': '1.05',
            'net_liability': '2000.00',
            'risk_threshold': '10000.00'
        },
        {
            'id': 'match_1_draw',
            'theoretical_odds': '3.20',
            'margin_factor': '1.05',
            'net_liability': '1500.00',
            'risk_threshold': '10000.00'
        },
        {
            'id': 'match_2_home',
            'theoretical_odds': '1.80',
            'margin_factor': '1.10',
            'net_liability': '8000.00',
            'risk_threshold': '10000.00'
        }
    ]
    
    batch_result = service.calculate_batch_risk_adjusted_odds(odds_configs)
    
    print(f"üìä T·ªïng k·∫øt batch:")
    print(f"  T·ªïng c·∫•u h√¨nh: {batch_result['total_configs']}")
    print(f"  Th√†nh c√¥ng: {batch_result['successful_configs']}")
    print(f"  Th·∫•t b·∫°i: {batch_result['failed_configs']}")
    print(f"  Th·ªã tr∆∞·ªùng b·ªã kh√≥a: {batch_result['locked_markets']}")
    print(f"  T·ª∑ l·ªá th√†nh c√¥ng: {batch_result['summary']['success_rate']:.2f}%")
    print(f"  T·ª∑ l·ªá kh√≥a: {batch_result['summary']['lock_rate']:.2f}%")
    
    print(f"\nüìã Chi ti·∫øt t·ª´ng c·∫•u h√¨nh:")
    for config_id, result in batch_result['results'].items():
        print(f"\n  {config_id}:")
        if result.get('success'):
            print(f"    Odds ch√†o b√°n: {result['risk_adjusted_odds']:.4f}")
            print(f"    Tr·∫°ng th√°i: {result['risk_status']}")
            print(f"    B·ªã kh√≥a: {result['market_locked']}")
        else:
            print(f"    L·ªói: {result.get('error', 'Unknown error')}")


def test_edge_cases():
    """Test c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát"""
    print("\n" + "=" * 60)
    print("TEST 4: C√ÅC TR∆Ø·ªúNG H·ª¢P ƒê·∫∂C BI·ªÜT")
    print("=" * 60)
    
    service = RiskAdjustedOddsService()
    
    # Test case 1: Tham s·ªë kh√¥ng h·ª£p l·ªá
    print("\nüö´ Test Case 1: Tham s·ªë kh√¥ng h·ª£p l·ªá")
    invalid_result = service.calculate_risk_adjusted_odds(
        theoretical_odds=Decimal('0'),  # Kh√¥ng h·ª£p l·ªá
        margin_factor=Decimal('1.05'),
        net_liability=Decimal('1000.00'),
        risk_threshold=Decimal('10000.00')
    )
    print(f"K·∫øt qu·∫£: {invalid_result}")
    
    # Test case 2: Margin factor = 1.0 (kh√¥ng h·ª£p l·ªá)
    print("\nüö´ Test Case 2: Margin factor = 1.0")
    invalid_result2 = service.calculate_risk_adjusted_odds(
        theoretical_odds=Decimal('2.00'),
        margin_factor=Decimal('1.0'),  # Kh√¥ng h·ª£p l·ªá
        net_liability=Decimal('1000.00'),
        risk_threshold=Decimal('10000.00')
    )
    print(f"K·∫øt qu·∫£: {invalid_result2}")
    
    # Test case 3: Risk threshold = 0 (kh√¥ng h·ª£p l·ªá)
    print("\nüö´ Test Case 3: Risk threshold = 0")
    invalid_result3 = service.calculate_risk_adjusted_odds(
        theoretical_odds=Decimal('2.00'),
        margin_factor=Decimal('1.05'),
        net_liability=Decimal('1000.00'),
        risk_threshold=Decimal('0')  # Kh√¥ng h·ª£p l·ªá
    )
    print(f"K·∫øt qu·∫£: {invalid_result3}")


def test_formula_verification():
    """Test x√°c minh c√¥ng th·ª©c"""
    print("\n" + "=" * 60)
    print("TEST 5: X√ÅC MINH C√îNG TH·ª®C")
    print("=" * 60)
    
    service = RiskAdjustedOddsService()
    
    # Test v·ªõi c√°c gi√° tr·ªã c·ª• th·ªÉ ƒë·ªÉ x√°c minh c√¥ng th·ª©c
    theoretical_odds = Decimal('2.00')
    margin_factor = Decimal('1.05')
    net_liability = Decimal('2000.00')
    risk_threshold = Decimal('10000.00')
    
    result = service.calculate_risk_adjusted_odds(
        theoretical_odds, margin_factor, net_liability, risk_threshold
    )
    
    print(f"üìä Tham s·ªë ƒë·∫ßu v√†o:")
    print(f"  Odds l√Ω thuy·∫øt: {theoretical_odds}")
    print(f"  Bi√™n l·ª£i nhu·∫≠n (M): {margin_factor}")
    print(f"  Tr√°ch nhi·ªám r√≤ng (L_r√≤ng): {net_liability}")
    print(f"  Tr·∫ßn r·ªßi ro (T_c·ªë_ƒë·ªãnh): {risk_threshold}")
    
    print(f"\nüî¢ T√≠nh to√°n th·ªß c√¥ng:")
    # B∆∞·ªõc 1: (Odds_l√Ω_thuy·∫øt / M)
    step1 = theoretical_odds / margin_factor
    print(f"  B∆∞·ªõc 1: {theoretical_odds} / {margin_factor} = {step1}")
    
    # B∆∞·ªõc 2: (L_r√≤ng / T_c·ªë_ƒë·ªãnh)
    step2 = net_liability / risk_threshold
    print(f"  B∆∞·ªõc 2: {net_liability} / {risk_threshold} = {step2}")
    
    # B∆∞·ªõc 3: (1 - (L_r√≤ng / T_c·ªë_ƒë·ªãnh))
    step3 = Decimal('1.0') - step2
    print(f"  B∆∞·ªõc 3: 1 - {step2} = {step3}")
    
    # B∆∞·ªõc 4: K·∫øt qu·∫£ cu·ªëi c√πng
    final_odds = step1 * step3
    print(f"  B∆∞·ªõc 4: {step1} * {step3} = {final_odds}")
    
    print(f"\n‚úÖ K·∫øt qu·∫£ t·ª´ service: {result.get('risk_adjusted_odds', 'N/A')}")
    print(f"‚úÖ K·∫øt qu·∫£ t√≠nh th·ªß c√¥ng: {final_odds}")
    print(f"‚úÖ Kh·ªõp nhau: {abs(float(result.get('risk_adjusted_odds', 0)) - float(final_odds)) < 0.0001}")


def main():
    """Ch·∫°y t·∫•t c·∫£ c√°c test"""
    print("üß™ B·∫ÆT ƒê·∫¶U TEST RISK-ADJUSTED OFFERED ODDS SERVICE")
    print("=" * 80)
    
    try:
        test_basic_calculation()
        test_detailed_explanation()
        test_batch_calculation()
        test_edge_cases()
        test_formula_verification()
        
        print("\n" + "=" * 80)
        print("‚úÖ T·∫§T C·∫¢ TEST ƒê√É HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå L·ªñI TRONG QU√Å TR√åNH TEST: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
