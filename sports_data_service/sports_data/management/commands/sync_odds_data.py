"""
Management command ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª∑ l·ªá c∆∞·ª£c t·ª´ The-Odds-API
Ch·∫°y m·ªói 10 ph√∫t ƒë·ªÉ c·∫≠p nh·∫≠t t·ª∑ l·ªá c∆∞·ª£c tham kh·∫£o cho Admin
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from django.core.cache import cache
import logging
from datetime import datetime

from sports_data.providers.multi_sports_provider import MultiSportsDataProvider
from sports_data.models import Sport

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª∑ l·ªá c∆∞·ª£c t·ª´ The-Odds-API theo l·ªãch tr√¨nh'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='B·∫Øt bu·ªôc ƒë·ªìng b·ªô ngay c·∫£ khi cache c√≤n h·∫°n',
        )
        parser.add_argument(
            '--sport',
            type=str,
            help='Ch·ªâ ƒë·ªãnh m√¥n th·ªÉ thao c·ª• th·ªÉ ƒë·ªÉ ƒë·ªìng b·ªô',
        )
        parser.add_argument(
            '--market',
            type=str,
            default='h2h',
            help='Lo·∫°i th·ªã tr∆∞·ªùng c∆∞·ª£c (h2h, spreads, totals)',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üéØ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª∑ l·ªá c∆∞·ª£c...')
        )
        
        start_time = timezone.now()
        force_sync = options['force']
        specific_sport = options['sport']
        market_type = options['market']
        
        try:
            # Kh·ªüi t·∫°o multi-provider service
            sports_service = MultiSportsDataProvider()
            
            # L·∫•y danh s√°ch m√¥n th·ªÉ thao c·∫ßn ƒë·ªìng b·ªô odds
            if specific_sport:
                sports = Sport.objects.filter(name__icontains=specific_sport, is_active=True)
            else:
                # Ch·ªâ ƒë·ªìng b·ªô c√°c m√¥n th·ªÉ thao ch√≠nh c√≥ odds data
                main_sports = ['football', 'basketball', 'american_football', 'baseball', 'hockey']
                sports = Sport.objects.filter(
                    name__in=main_sports,
                    is_active=True
                )
            
            total_sports = sports.count()
            self.stdout.write(f"üìä T·ªïng s·ªë m√¥n th·ªÉ thao c·∫ßn ƒë·ªìng b·ªô odds: {total_sports}")
            
            # ƒê·ªìng b·ªô odds cho t·ª´ng m√¥n th·ªÉ thao
            for sport in sports:
                self.stdout.write(f"üé≤ ƒêang ƒë·ªìng b·ªô odds cho {sport.name}...")
                
                try:
                    # Ki·ªÉm tra cache tr∆∞·ªõc khi ƒë·ªìng b·ªô
                    cache_key = f"odds_data_sync_{sport.name}_{market_type}_{datetime.now().strftime('%Y%m%d_%H%M')}"
                    
                    if not force_sync and cache.get(cache_key):
                        self.stdout.write(f"   ‚è≠Ô∏è  Odds cho {sport.name} ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô g·∫ßn ƒë√¢y, b·ªè qua")
                        continue
                    
                    # ƒê·ªìng b·ªô odds data
                    self._sync_odds_for_sport(sports_service, sport, market_type)
                    
                    # ƒê√°nh d·∫•u ƒë√£ ƒë·ªìng b·ªô trong cache (10 ph√∫t)
                    cache.set(cache_key, True, 600)
                    
                    self.stdout.write(
                        self.style.SUCCESS(f"   ‚úÖ Odds cho {sport.name} ƒë·ªìng b·ªô th√†nh c√¥ng")
                    )
                    
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f"   ‚ùå L·ªói ƒë·ªìng b·ªô odds cho {sport.name}: {str(e)}")
                    )
                    logger.error(f"Error syncing odds for sport {sport.name}: {str(e)}")
                    continue
            
            end_time = timezone.now()
            duration = end_time - start_time
            
            self.stdout.write(
                self.style.SUCCESS(
                    f'üéâ Ho√†n th√†nh ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª∑ l·ªá c∆∞·ª£c trong {duration.total_seconds():.2f} gi√¢y'
                )
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå L·ªói ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª∑ l·ªá c∆∞·ª£c: {str(e)}')
            )
            logger.error(f"Error in sync_odds_data command: {str(e)}")
            raise

    def _sync_odds_for_sport(self, sports_service, sport, market_type):
        """ƒê·ªìng b·ªô odds cho m·ªôt m√¥n th·ªÉ thao c·ª• th·ªÉ"""
        try:
            # L·∫•y odds data t·ª´ provider
            odds_data = sports_service.get_odds(sport.name.lower(), market_type)
            
            if odds_data and 'data' in odds_data:
                # X·ª≠ l√Ω v√† l∆∞u odds data
                self._process_odds_data(sport, odds_data['data'], market_type)
                
        except Exception as e:
            logger.warning(f"Error syncing odds for {sport.name}: {str(e)}")

    def _process_odds_data(self, sport, odds_data, market_type):
        """X·ª≠ l√Ω v√† l∆∞u odds data v√†o database"""
        try:
            # TODO: Implement odds data processing logic
            # 1. Parse odds data t·ª´ API response
            # 2. Map v·ªõi matches trong database
            # 3. L∆∞u odds data cho admin reference
            # 4. C·∫≠p nh·∫≠t cache cho quick access
            
            # T·∫°m th·ªùi log ƒë·ªÉ debug
            logger.info(f"Processing odds data for {sport.name}, market: {market_type}, data count: {len(odds_data) if isinstance(odds_data, list) else 0}")
            
        except Exception as e:
            logger.error(f"Error processing odds data for {sport.name}: {str(e)}")
