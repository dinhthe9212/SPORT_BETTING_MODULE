"""
Management command ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu th·ªÉ thao theo l·ªãch tr√¨nh
Ch·∫°y m·ªói 5 ph√∫t ƒë·ªÉ c·∫≠p nh·∫≠t live scores, fixtures v√† statistics
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from django.core.cache import cache
import logging
from datetime import datetime, timedelta

from sports_data.providers.multi_sports_provider import MultiSportsDataProvider
from sports_data.models import Sport, SportsDataProvider as ProviderModel

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'ƒê·ªìng b·ªô d·ªØ li·ªáu th·ªÉ thao t·ª´ c√°c providers theo l·ªãch tr√¨nh'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='B·∫Øt bu·ªôc ƒë·ªìng b·ªô ngay c·∫£ khi cache c√≤n h·∫°n',
        )
        parser.add_argument(
            '--provider',
            type=str,
            help='Ch·ªâ ƒë·ªãnh provider c·ª• th·ªÉ ƒë·ªÉ ƒë·ªìng b·ªô',
        )
        parser.add_argument(
            '--sport',
            type=str,
            help='Ch·ªâ ƒë·ªãnh m√¥n th·ªÉ thao c·ª• th·ªÉ ƒë·ªÉ ƒë·ªìng b·ªô',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu th·ªÉ thao...')
        )
        
        start_time = timezone.now()
        force_sync = options['force']
        specific_provider = options['provider']
        specific_sport = options['sport']
        
        try:
            # Kh·ªüi t·∫°o multi-provider service
            sports_service = MultiSportsDataProvider()
            
            # L·∫•y danh s√°ch m√¥n th·ªÉ thao c·∫ßn ƒë·ªìng b·ªô
            if specific_sport:
                sports = Sport.objects.filter(name__icontains=specific_sport, is_active=True)
            else:
                sports = Sport.objects.filter(is_active=True)
            
            total_sports = sports.count()
            self.stdout.write(f"üìä T·ªïng s·ªë m√¥n th·ªÉ thao c·∫ßn ƒë·ªìng b·ªô: {total_sports}")
            
            # ƒê·ªìng b·ªô t·ª´ng m√¥n th·ªÉ thao
            for sport in sports:
                self.stdout.write(f"üèà ƒêang ƒë·ªìng b·ªô {sport.name}...")
                
                try:
                    # Ki·ªÉm tra cache tr∆∞·ªõc khi ƒë·ªìng b·ªô
                    cache_key = f"sports_data_sync_{sport.name}_{datetime.now().strftime('%Y%m%d_%H%M')}"
                    
                    if not force_sync and cache.get(cache_key):
                        self.stdout.write(f"   ‚è≠Ô∏è  {sport.name} ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô g·∫ßn ƒë√¢y, b·ªè qua")
                        continue
                    
                    # ƒê·ªìng b·ªô live scores
                    self._sync_live_scores(sports_service, sport)
                    
                    # ƒê·ªìng b·ªô fixtures
                    self._sync_fixtures(sports_service, sport)
                    
                    # ƒê·ªìng b·ªô statistics
                    self._sync_statistics(sports_service, sport)
                    
                    # ƒê√°nh d·∫•u ƒë√£ ƒë·ªìng b·ªô trong cache (5 ph√∫t)
                    cache.set(cache_key, True, 300)
                    
                    self.stdout.write(
                        self.style.SUCCESS(f"   ‚úÖ {sport.name} ƒë·ªìng b·ªô th√†nh c√¥ng")
                    )
                    
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f"   ‚ùå L·ªói ƒë·ªìng b·ªô {sport.name}: {str(e)}")
                    )
                    logger.error(f"Error syncing sport {sport.name}: {str(e)}")
                    continue
            
            # C·∫≠p nh·∫≠t provider performance metrics
            self._update_provider_metrics(sports_service)
            
            end_time = timezone.now()
            duration = end_time - start_time
            
            self.stdout.write(
                self.style.SUCCESS(
                    f'üéâ Ho√†n th√†nh ƒë·ªìng b·ªô d·ªØ li·ªáu th·ªÉ thao trong {duration.total_seconds():.2f} gi√¢y'
                )
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå L·ªói ƒë·ªìng b·ªô d·ªØ li·ªáu: {str(e)}')
            )
            logger.error(f"Error in sync_sports_data command: {str(e)}")
            raise

    def _sync_live_scores(self, sports_service, sport):
        """ƒê·ªìng b·ªô live scores cho m√¥n th·ªÉ thao"""
        try:
            live_data = sports_service.get_live_scores(sport.name.lower())
            
            if live_data and 'data' in live_data:
                # C·∫≠p nh·∫≠t live scores v√†o database
                self._update_live_scores_in_db(sport, live_data['data'])
                
        except Exception as e:
            logger.warning(f"Error syncing live scores for {sport.name}: {str(e)}")

    def _sync_fixtures(self, sports_service, sport):
        """ƒê·ªìng b·ªô fixtures cho m√¥n th·ªÉ thao"""
        try:
            # ƒê·ªìng b·ªô fixtures cho h√¥m nay v√† 7 ng√†y t·ªõi
            for i in range(8):
                date = (datetime.now() + timedelta(days=i)).strftime('%Y-%m-%d')
                fixtures_data = sports_service.get_fixtures(sport.name.lower(), date)
                
                if fixtures_data and 'data' in fixtures_data:
                    # C·∫≠p nh·∫≠t fixtures v√†o database
                    self._update_fixtures_in_db(sport, fixtures_data['data'], date)
                    
        except Exception as e:
            logger.warning(f"Error syncing fixtures for {sport.name}: {str(e)}")

    def _sync_statistics(self, sports_service, sport):
        """ƒê·ªìng b·ªô statistics cho m√¥n th·ªÉ thao"""
        try:
            # C·∫≠p nh·∫≠t th·ªëng k√™ c∆° b·∫£n
            self._update_sport_statistics(sport)
            
        except Exception as e:
            logger.warning(f"Error syncing statistics for {sport.name}: {str(e)}")

    def _update_live_scores_in_db(self, sport, live_data):
        """C·∫≠p nh·∫≠t live scores v√†o database"""
        # TODO: Implement live score update logic
        pass

    def _update_fixtures_in_db(self, sport, fixtures_data, date):
        """C·∫≠p nh·∫≠t fixtures v√†o database"""
        # TODO: Implement fixtures update logic
        pass

    def _update_sport_statistics(self, sport):
        """C·∫≠p nh·∫≠t th·ªëng k√™ m√¥n th·ªÉ thao"""
        # TODO: Implement statistics update logic
        pass

    def _update_provider_metrics(self, sports_service):
        """C·∫≠p nh·∫≠t metrics hi·ªáu su·∫•t c·ªßa providers"""
        try:
            for provider_name, provider in sports_service.providers.items():
                if hasattr(provider, 'get_performance_metrics'):
                    metrics = provider.get_performance_metrics()
                    
                    # C·∫≠p nh·∫≠t v√†o database
                    provider_model, created = ProviderModel.objects.get_or_create(
                        name=provider_name
                    )
                    
                    if hasattr(provider_model, 'data_accuracy'):
                        provider_model.data_accuracy = metrics.get('accuracy', 0.95)
                        provider_model.update_speed = metrics.get('speed', 30)
                        provider_model.coverage_rate = metrics.get('coverage', 0.90)
                        provider_model.last_successful_update = timezone.now()
                        provider_model.save()
                        
        except Exception as e:
            logger.warning(f"Error updating provider metrics: {str(e)}")
