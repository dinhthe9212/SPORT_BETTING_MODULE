version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: sport_betting_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - sport_betting_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sport_betting_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sport_betting_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka (for event streaming)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: sport_betting_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sport_betting_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: sport_betting_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_INTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    networks:
      - sport_betting_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Betting Service - Production Ready
  betting_service:
    image: test-betting-service:v1.0.0
    container_name: sport_betting_betting_service
    environment:
      - DB_NAME=${BETTING_DB_NAME}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB_BETTING}
      - SERVICE_NAME=betting_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8002:8002"
    networks:
      - sport_betting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Carousel Service - Production Ready
  carousel_service:
    image: test-carousel-service:v1.0.0
    container_name: sport_betting_carousel_service
    environment:
      - DB_NAME=${CAROUSEL_DB_NAME}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB_CAROUSEL}
      - SERVICE_NAME=carousel_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8006:8006"
    networks:
      - sport_betting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Individual Bookmaker Service - Production Ready
  individual_bookmaker_service:
    image: individual-bookmaker-service:v1.0.0
    container_name: sport_betting_individual_bookmaker_service
    environment:
      - DB_NAME=${INDIVIDUAL_BOOKMAKER_DB_NAME}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB_INDIVIDUAL_BOOKMAKER}
      - SERVICE_NAME=individual_bookmaker_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8007:8007"
    networks:
      - sport_betting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Risk Management Service - Production Ready
  risk_management_service:
    image: test-risk-management-service:v1.0.0
    container_name: sport_betting_risk_management_service
    environment:
      - DB_NAME=${RISK_MANAGEMENT_DB_NAME}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB_RISK_MANAGEMENT}
      - SERVICE_NAME=risk_management_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8003:8003"
    networks:
      - sport_betting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Saga Orchestrator - Production Ready
  saga_orchestrator:
    image: saga-orchestrator:v1.0.0
    container_name: sport_betting_saga_orchestrator
    environment:
      - DB_NAME=${SAGA_DB_NAME}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB_SAGA}
      - SERVICE_NAME=saga_orchestrator
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8008:8008"
    networks:
      - sport_betting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Sports Data Service - Production Ready
  sports_data_service:
    image: sports-data-service:v1.0.0
    container_name: sport_betting_sports_data_service
    environment:
      - DB_NAME=${SPORTS_DATA_DB_NAME}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB_SPORTS_DATA}
      - SERVICE_NAME=sports_data_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8005:8005"
    networks:
      - sport_betting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Sports Data Service Celery Worker - Production Ready
  sports_data_celery:
    image: sports-data-service:v1.0.0
    container_name: sport_betting_sports_data_celery
    environment:
      - DB_NAME=${SPORTS_DATA_DB_NAME}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB_SPORTS_DATA}
      - SERVICE_NAME=sports_data_celery
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      sports_data_service:
        condition: service_healthy
    command: ["celery", "-A", "sports_data_service_project", "worker", "--beat", "--loglevel=info"]
    networks:
      - sport_betting_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sport_betting_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - betting_service
      - carousel_service
      - individual_bookmaker_service
      - risk_management_service
      - saga_orchestrator
      - sports_data_service
    networks:
      - sport_betting_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  sport_betting_network:
    driver: bridge